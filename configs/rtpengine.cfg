loadmodule "rtpengine.so"

#!trydefenvs RTPENGINE_FLAGS
#!trydefenv RTPENGINE_DISABLE_TOUT_SEC
#!trydefenv RTPENGINE_TOUT_MSEC_RESPONSE
#!trydefenv RTPENGINE_MAX_RETRIES
#!trydefenv RTPENGINE_HTABLE_MAX_TIME_MS

modparam("rtpengine", "rtpengine_allow_op", 1)
modparam("rtpengine", "setid_default", 1)

modparam("rtpengine", "extra_id_pv", "$avp(rproxy_extra_id)")
modparam("rtpengine", "rtp_inst_pvar", "$avp(rproxy_instance)")

modparam("rtpengine", "hash_table_size", 128)

modparam("rtpengine", "db_url", DB_CONNECTION)
modparam("rtpengine", "table_name", "rtpengine")

modparam("rtpengine", "rtpengine_disable_tout", RTPENGINE_DISABLE_TOUT_SEC)
modparam("rtpengine", "rtpengine_tout_ms", RTPENGINE_TOUT_MSEC_RESPONSE)
modparam("rtpengine", "rtpengine_retr", RTPENGINE_MAX_RETRIES)
modparam("rtpengine", "hash_table_tout", RTPENGINE_HTABLE_MAX_TIME_MS)

modparam("rtpengine", "dtmf_event_callid", "$avp(dtmf_event_callid)")
modparam("rtpengine", "dtmf_event", "$avp(dtmf_event)")
modparam("rtpengine", "dtmf_event_timestamp", "$avp(dtmf_event_timestamp)")
modparam("rtpengine", "dtmf_event_source_tag", "$avp(dtmf_event_source_tag)")

## Let's manage as dispatcher
## Let's include failover
## Let's offer based on offer/answer direction to select the correct templates - dlg handling, but re-change on invite/update
    ## if an invite is received externally from LAN SDP, let's use internal templates to outside
    ## SRTP let's do end-to-end
    ## SRTP only one-hand (not offer to FS) handled as a DB flag setted by domain?

route[RTPENGINE_MANAGE] {

    if(sdp_with_transport("RTP/SAVP"))
        $vn(has_srtp) = "true";

    if(is_ip_rfc1918($si))
        $vn(private_ip) = "true";

    if(is_request()) {

        ## if dialog has sent internally, let's negotiate with provider
        if($dlg_var(is_from_provider) == $null) {

            if($vn(has_srtp) != $null && $vn(private_ip) != $null)
                $vz(rtpengine_template) = "template=SRTP-EXTERNAL-PRIVATE-OFFER";
            else if($vn(has_srtp) != $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=SRTP-EXTERNAL-OFFER";
            else if($vn(has_srtp) == $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-EXTERNAL-OFFER";
            else
                $vz(rtpengine_template) = "template=RTP-EXTERNAL-PRIVATE-OFFER";
        } else {
            if($vn(has_srtp) != $null && $vn(private_ip) != $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-PRIVATE-OFFER";
            else if($vn(has_srtp) != $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-OFFER";
            else if($vn(has_srtp) == $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-PRIVATE-OFFER";
            else
                $vz(rtpengine_template) = "template=RTP-INTERNAL-OFFER";
        }
    } else {

        if($dlg_var(is_from_provider) == $null) {

            if($vn(has_srtp) != $null && $vn(private_ip) != $null)
                $vz(rtpengine_template) = "template=SRTP-EXTERNAL-PRIVATE-ANSWER";
            else if($vn(has_srtp) != $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=SRTP-EXTERNAL-ANSWER";
            else if($vn(has_srtp) == $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-EXTERNAL-ANSWER";
            else
                $vz(rtpengine_template) = "template=RTP-EXTERNAL-PRIVATE-ANSWER";
        } else {
            if($vn(has_srtp) != $null && $vn(private_ip) != $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-PRIVATE-ANSWER";
            else if($vn(has_srtp) != $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-ANSWER";
            else if($vn(has_srtp) == $null && $vn(private_ip) == $null)
                $vz(rtpengine_template) = "template=RTP-INTERNAL-PRIVATE-ANSWER";
            else
                $vz(rtpengine_template) = "template=RTP-INTERNAL-ANSWER";
        }

    }

    xlog("L_INFO", "template to be used: $vz(rtpengine_template), setid to use: $avp(rproxy_setid), sdp body: $rb");
    xlog("L_INFO", "Calling rtpengine_manage() for $rm ($si:$sp)\n");
    if(!rtpengine_manage("$vz(rtpengine_template)")) ## no flags, they are handled in the template used in rtpengine.conf file, based on the used interface (only available for >= mr13.1)
        xlog("L_ERR", "[RTPENGINE_MANAGE] Failure to anchorage media with rtpengine - setid to use: $avp(rproxy_setid)");
    else
        xlog("L_DEBUG", "[RTPENGINE_MANAGE] Anchoring media to rtpengine - $rb");

    msg_apply_changes();
}

event_route[rtpengine:dtmf-event] {
    xlog("L_INFO", "callid: $avp(dtmf_event_callid) , source_tag: $avp(dtmf_event_source_tag) , timestamp: $avp(dtmf_event_timestamp) , dtmf: $avp(dtmf_event) \n");
}
