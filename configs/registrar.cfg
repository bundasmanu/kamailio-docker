#!KAMAILIO

#!define NAT_BFLAG 1

loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "domain.so"

modparam("usrloc", "nat_bflag", NAT_BFLAG)
modparam("usrloc", "use_domain", 1)
modparam("usrloc", "timer_interval", 30)
modparam("usrloc", "db_url", DB_CONNECTION)
modparam("usrloc", "db_mode", 0) ## let's keep in memory only at this time
modparam("usrloc", "matching_mode", 2)
modparam("usrloc", "cseq_delay", 20)
modparam("usrloc", "timer_procs", 2)
modparam("tm|usrloc", "xavp_contact", "ulattrs")
modparam("usrloc", "close_expired_tcp", 1)
modparam("usrloc", "handle_lost_tcp", 1)
modparam("usrloc", "db_clean_tcp", 1)
modparam("usrloc", "hash_size", 15)
modparam("usrloc", "db_check_update", 1)
modparam("usrloc", "db_insert_update", 1)
modparam("usrloc", "db_ops_ruid", 1)
modparam("usrloc", "preload", "location") ## need to check if it's really needed

modparam("registrar", "default_expires", 300)
modparam("registrar", "max_expires", MAX_EXPIRES)
modparam("registrar", "case_sensitive", 1)
modparam("registrar", "xavp_cfg", "reg")
modparam("registrar", "xavp_rcd", "ulrcd")
modparam("registrar", "outbound_mode", 0)

modparam("auth", "nonce_expire", 60)
modparam("auth", "add_authinfo_hdr", no)

modparam("auth_db", "db_url", DB_CONNECTION)
modparam("auth_db", "use_domain", 1)

#!defexps SUBSCRIBERS_HTABLE "subscribers=>size=6;autoexpire=" + MAX_EXPIRES + ";dbtable=subscriber;cols='uri,password';"
modparam("htable", "htable", SUBSCRIBERS_HTABLE)

modparam("domain", "db_url", DB_CONNECTION)
modparam("domain", "domain_table", "domain")
modparam("domain", "domain_attrs_table", "domain_attrs")
modparam("domain", "did_col", "null")
modparam("domain", "register_myself", 1)

route[ADD_CHALLENGE] {

    ## first register, send challenge
    if($hdr(Authorization) == $null) {
        auth_challenge("$fd", "1");
        exit;
    }

    ## Register with Authorization
    if(!pv_auth_check("$ar", "$avp(password)", "0", "1")) {
        switch($retcode) {
            case -1:
                sl_send_reply("503", "Invalid Register Request");
            case -2:
                sl_send_reply("403", "Forbidden - Wrong Password");
            case -5:
                sl_send_reply("403", "Forbidden - Please Provide Credentials");
            default:
                sl_send_reply("403", "Forbidden");
        }
        exit;
    }

}

route[SAVE_LOCATION] {

    consume_credentials();

    if(!save("location")) {
        exit;
    }

}

route[REPLICATE_REGISTRATION] {
    $var(dst_rep) = "sip:172.25.0.4:5060;transport=udp";
    if($Ri != $(var(dst_rep){s.select,1,:})) {
        t_replicate("$var(dst_rep)");
    }
}

route[GET_SUBSCRIBER] {

    $var(uri) = $fU + "@" + $fd;
    if($sht(subscribers=>$var(uri)) != $null) {
        $avp(password)= $sht(subscribers=>$var(uri));
        return;
    }

    sl_send_reply("404", "User Not Found - $fu)");
    exit;
}

route[NAT_REGISTRAR] {

    if(nat_uac_test("18")) {
        setbflag(NAT_BFLAG);
        force_rport();
    }

    if(nat_uac_test("1")) {
        setbflag(NAT_BFLAG);
        add_contact_alias();
    }

}

route[REGISTRAR] {

    if($rm =~ "REGISTER") {
        route(GET_SUBSCRIBER);

        route(ADD_CHALLENGE);

        ## only take care of NAT after challenge was accepted
        route(NAT_REGISTRAR);

        route(SAVE_LOCATION);

        exit;

    }
}
