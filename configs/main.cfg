#!KAMAILIO

#!trydefenvs STARTER_KAM_USER
#!ifndef STARTER_KAM_USER
    #!define STARTER_KAM_USER "kamailio"
#!endif

#!trydefenvs STARTER_KAM_GROUP
#!ifndef STARTER_KAM_GROUP
    #!define STARTER_KAM_GROUP "kamailio"
#!endif

#!trydefenvs DB_CONNECTION
#!ifndef DB_CONNECTION
    #!define DB_CONNECTION "postgres://postgres:postgres@172.25.0.2:5432/kamailio"
#!endif

#!trydefenv MAX_EXPIRES
#!ifndef MAX_EXPIRES
    #!define MAX_EXPIRES 3600
#!endif

#!trydefenv LISTEN_IP
#!ifndef LISTEN_IP
    #!define LISTEN_IP 127.0.0.1:5060
#!endif

#!trydefenvs HEPLIFY_IP
#!trydefenv HEP_CAPTURE_ID

#!defexps LISTEN_IP_ADDRESS_DISPATCHER "udp:" + LISTEN_IP
#!defexps SIP_URI_LISTEN_IP_ADDRESS "sip:" + LISTEN_IP

#!defexps SQLOPS_DB_CONNECTION "ca=>" + DB_CONNECTION

loadmodule "ipops.so"
loadmodule "pv.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "xlog.so"
loadmodule "ctl.so"
loadmodule "rr.so"
loadmodule "tm.so" ## dependency for sl
loadmodule "sl.so" ## dependency for xhttp
loadmodule "xhttp.so" ## dependency for jsonrpc
loadmodule "jsonrpcs.so"
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "domain.so"
loadmodule "dispatcher.so"
loadmodule "siptrace.so"

modparam("xlog", "prefix_mode", 1) ## different from prefix_mode global var
modparam("xlog", "prefix", "[$cfg(route)] [$cfg(line)] ") ## this is different from log_prefix global var
modparam("xlog", "log_facility", "LOG_LOCAL5")

modparam("ctl", "binrpc", "/var/run/kamailio/kamailio_ctl")
modparam("ctl", "user", STARTER_KAM_USER)
modparam("ctl", "group", STARTER_KAM_GROUP)

modparam("jsonrpcs", "pretty_format", 0)
modparam("jsonrpcs", "transport", 0) ## jsonrpc for HTTP usage and also tcp and via fifo (kamctl)
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
modparam("jsonrpcs", "fifo_user", STARTER_KAM_USER)
modparam("jsonrpcs", "fifo_group", STARTER_KAM_GROUP)
modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")
modparam("jsonrpcs", "dgram_user", STARTER_KAM_USER)
modparam("jsonrpcs", "dgram_group", STARTER_KAM_GROUP)

modparam("sqlops", "sqlcon", SQLOPS_DB_CONNECTION)
modparam("sqlops", "connect_mode", 0)

modparam("htable", "db_url", DB_CONNECTION)
modparam("htable", "htable", "params=>size=4;autoexpire=0;dbtable=htable;")

modparam("dispatcher", "db_url", DB_CONNECTION)
modparam("dispatcher", "force_dst", 1)
modparam("dispatcher", "setid_pvname", "$avp(setid)")
modparam("dispatcher", "attrs_pvname", "$avp(attrs)")
modparam("dispatcher", "ds_ping_from", "sip:registrar@local.ping")
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "ds_probing_threshold", 6) ## inactive after 1 minute of attempts, without success
modparam("dispatcher", "ds_inactive_threshold", 2) ## active after two attempts
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=200;code=202")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_latency_stats", 1)
modparam("dispatcher", "ds_retain_latency_stats", 1)
modparam("dispatcher", "ds_hash_size", 5) ## 32 is enough
modparam("dispatcher", "ds_default_socket", LISTEN_IP_ADDRESS_DISPATCHER)
modparam("dispatcher", "ds_attrs_none", 1)
modparam("dispatcher", "reload_delta", 10)

modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "duplicate_uri", HEPLIFY_IP)
modparam("siptrace", "hep_capture_id", HEP_CAPTURE_ID)
modparam("siptrace", "send_sock_addr", SIP_URI_LISTEN_IP_ADDRESS)
modparam("siptrace", "trace_mode", 1)
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "hep_version", 3)

include_file "registrar.cfg"
include_file "options.cfg"
include_file "sanity.cfg"

listen=LISTEN_IP

debug=3
log_prefix_mode=1
log_prefix="[$cfg(file)]"
log_stderror=no
auto_aliases=no
tcp_accept_no_cl=yes ## required for xhttp

request_route {
    xlog("L_NOTICE", "Hi\n");

    route(SANITY);

    if ($rm =~ "OPTIONS")
        route(OPTIONS);

}

event_route[xhttp:request] {
    return;
}
